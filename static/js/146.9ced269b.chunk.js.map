{"version":3,"file":"static/js/146.9ced269b.chunk.js","mappings":"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","sources":["webpack://task4/./src/components/home/style/moveItem.module.scss?1fce","components/home/movies/MoviesItem.tsx","webpack://task4/./src/components/home/style/post.module.scss?e097","components/home/posts/PostList.tsx","webpack://task4/./src/components/pagination/MyPagination.module.scss?fe45","components/pagination/Pagination.tsx","components/home/series/SeriesItem.tsx","components/home/movies/MoviesList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieItem\":\"moveItem_movieItem__BqIJp\",\"imageWrapper\":\"moveItem_imageWrapper__rsBDY\",\"movieItem__img\":\"moveItem_movieItem__img__rcll1\",\"main_info\":\"moveItem_main_info__fhEZY\",\"hoverDetails\":\"moveItem_hoverDetails__IA2F2\"};","import React, { FC, useState } from \"react\";\r\nimport { IMovie } from \"../../../store/types/types\";\r\nimport style from \"../style/moveItem.module.scss\";\r\nimport { MaxLength } from \"../../../helpers/function\";\r\n\r\ninterface MoviesItemProps {\r\n    post: IMovie;\r\n    onHover: (id: number | null) => void;\r\n}\r\n\r\nconst MoviesItem: FC<MoviesItemProps> = ({ post, onHover }) => {\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsHovered(true);\r\n        onHover(post.id);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovered(false);\r\n        onHover(null);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={style.movieItem}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}>\r\n            <div className={style.imageWrapper}>\r\n                <img\r\n                    src={`https://image.tmdb.org/t/p/w500/${post.poster_path}`}\r\n                    alt={post.title}\r\n                />\r\n                <div className={style.main_info}>\r\n                    {isHovered && (\r\n                        <div className={style.hoverDetails}>\r\n                            <h2>{MaxLength(post.title, 10)}</h2>\r\n                            <p>Rating: {post.vote_average}</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviesItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"skeletonWrapper\":\"post_skeletonWrapper__bn9LY\",\"postlist\":\"post_postlist__SVdGY\",\"filters\":\"post_filters__OjxHq\",\"totalItems\":\"post_totalItems__qHe6-\",\"loading\":\"post_loading__cD1vt\",\"postlist_center\":\"post_postlist_center__ZTkBH\",\"postItem\":\"post_postItem__WcoQE\",\"hoverText\":\"post_hoverText__pC0Vh\"};","import React, { useState, memo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Skeleton } from \"@mui/material\";\r\nimport { useAppSelector } from \"../../../store/store\";\r\nimport style from \"../style/post.module.scss\";\r\n\r\ninterface PostListProps<T> {\r\n    items: T[];\r\n    renderItem: (\r\n        item: T,\r\n        onHover: (id: number | null) => void\r\n    ) => React.ReactNode;\r\n    toNav: string;\r\n    total: number;\r\n}\r\n\r\nconst PostList = <T extends { id: number }>({\r\n    items,\r\n    renderItem,\r\n    toNav,\r\n}: PostListProps<T>) => {\r\n    const navigate = useNavigate();\r\n    const { loading, error } = useAppSelector((state) => state.posts);\r\n    const [_, setHoveredItem] = useState<number | null>(null);\r\n\r\n    const renderSkeletons = () =>\r\n        Array.from({ length: 20 }).map((_, index) => (\r\n            <Skeleton\r\n                key={index}\r\n                variant=\"rectangular\"\r\n                height={240}\r\n                width={160}\r\n                className={style.skeletonWrapper}\r\n            />\r\n        ));\r\n\r\n    const handleHover = (id: number | null) => {\r\n        setHoveredItem(id);\r\n    };\r\n\r\n    return (\r\n        <div className={style.postlist}>\r\n            {loading ? (\r\n                <div className={style.loading}>{renderSkeletons()}</div>\r\n            ) : error ? (\r\n                <div className={style.error}>An error occurred: {error}</div>\r\n            ) : (\r\n                <div className={style.postlist_center}>\r\n                    {items.map((item) => (\r\n                        <div\r\n                            key={item.id}\r\n                            className={style.postItem}\r\n                            onClick={() => navigate(`/${toNav}/${item.id}`)}\r\n                            onMouseEnter={() => handleHover(item.id)}\r\n                            onMouseLeave={() => handleHover(null)}>\r\n                            {renderItem(item, handleHover)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"paginationbox\":\"MyPagination_paginationbox__4YshS\",\"pagination\":\"MyPagination_pagination__Ythco\",\"MuiPaginationItem-root\":\"MyPagination_MuiPaginationItem-root__csI2U\",\"Mui-selected\":\"MyPagination_Mui-selected__dUNG2\"};","import { Pagination, Stack } from \"@mui/material\";\r\nimport React, { FC, memo, useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport cls from \"./MyPagination.module.scss\";\r\n\r\ntype MyPaginationProps = {\r\n  total: number; // total_pages из API\r\n  onChange: (page: number) => void;\r\n};\r\n\r\nconst MyPagination: FC<MyPaginationProps> = memo(({ total, onChange }) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const pageFromParams = Number(searchParams.get(\"page\")) || 1;\r\n\r\n  useEffect(() => {\r\n    if (pageFromParams !== currentPage) {\r\n      setCurrentPage(pageFromParams);\r\n      onChange(pageFromParams); // Вызываем изменение только при необходимости\r\n    }\r\n  }, [pageFromParams, currentPage, onChange]);\r\n\r\n  const handlePageChange = (\r\n    event: React.ChangeEvent<unknown>,\r\n    page: number\r\n  ) => {\r\n    if (page !== currentPage) {\r\n      setCurrentPage(page);\r\n      searchParams.set(\"page\", page.toString());\r\n      setSearchParams(searchParams);\r\n      onChange(page); // Только при изменении страницы\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cls.paginationbox}>\r\n      <Stack spacing={2} alignItems=\"center\" marginTop={4}>\r\n        <Pagination\r\n          count={Math.min(total, 500)} // Ограничиваем максимальное число страниц\r\n          page={currentPage}\r\n          onChange={handlePageChange}\r\n          sx={{\r\n            \"& .MuiPaginationItem-root\": {\r\n              color: \"var(--pagination-item-color)\",\r\n              borderColor: \"var(--pagination-item-border-color)\"\r\n            },\r\n            \"& .MuiPaginationItem-root.Mui-selected\": {\r\n              backgroundColor: \"var(--pagination-item-selected-bg)\",\r\n              color: \"var(--pagination-item-selected-color)\"\r\n            },\r\n            \"& .MuiPaginationItem-root:hover\": {\r\n              backgroundColor: \"var(--pagination-item-hover-bg)\",\r\n              color: \"var(--pagination-item-hover-color)\"\r\n            }\r\n          }}\r\n        />\r\n      </Stack>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPagination;\r\n","import React, { FC, useState } from \"react\";\r\nimport { ISeries } from \"../../../store/types/types\";\r\nimport style from \"../style/moveItem.module.scss\";\r\nimport { MaxLength } from \"../../../helpers/function\";\r\n\r\ninterface SeriesItemProps {\r\n    post: ISeries;\r\n    onHover: (id: number | null) => void;\r\n}\r\n\r\nconst SeriesItem: FC<SeriesItemProps> = ({ post, onHover }) => {\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsHovered(true);\r\n        onHover(post.id);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovered(false);\r\n        onHover(null);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={style.movieItem}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}>\r\n            <div className={style.imageWrapper}>\r\n                <img\r\n                    src={`https://image.tmdb.org/t/p/w500/${post.poster_path}`}\r\n                    alt={post.name}\r\n                />\r\n                <div className={style.main_info}>\r\n                    {isHovered && (\r\n                        <div className={style.hoverDetails}>\r\n                            <h2>{MaxLength(post.name, 10)}</h2>\r\n                            <p>Rating: {post.vote_average}</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeriesItem;\r\n","import { useEffect, FC, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../store/store\";\r\nimport { getMovie, getSeries } from \"../../../store/posts/postAction\";\r\nimport MoviesItem from \"./MoviesItem\";\r\nimport PostList from \"../posts/PostList\";\r\nimport MyPagination from \"../../pagination/Pagination\";\r\nimport { useParams, useSearchParams } from \"react-router-dom\";\r\nimport { IMovie, ISeries } from \"../../../store/types/types\";\r\nimport SeriesItem from \"../series/SeriesItem\";\r\n\r\nconst MoviesList: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { series, movies, total_pages, loading, error } = useAppSelector(\r\n    (state) => state.posts\r\n  );\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [currentPage, setCurrentPage] = useState(\r\n    Number(searchParams.get(\"page\")) || 1\r\n  );\r\n  const language = localStorage.getItem(\"language\") || \"en-US\";\r\n  console.log(language);\r\n\r\n  const { state } = useParams<{ state: string }>();\r\n\r\n  useEffect(() => {\r\n    if (state === \"series\") {\r\n      dispatch(getSeries({ currentPage, language }));\r\n    } else {\r\n      dispatch(getMovie({ currentPage, language }));\r\n    }\r\n  }, [dispatch, currentPage, state, language]);\r\n\r\n  const handlePageChange = (page: number) => {\r\n    if (page !== currentPage) {\r\n      setCurrentPage(page);\r\n      setSearchParams({ page: page.toString() });\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n  return (\r\n    <>\r\n      {state === \"series\" ? (\r\n        <>\r\n          <PostList<ISeries>\r\n            items={series.entities ? Object.values(series.entities) : []}\r\n            renderItem={(post, onHover) => (\r\n              <SeriesItem post={post} onHover={onHover} key={post.id} />\r\n            )}\r\n            toNav={\"series\"}\r\n            total={0}\r\n          />\r\n        </>\r\n      ) : (\r\n        <PostList<IMovie>\r\n          items={movies.entities ? Object.values(movies.entities) : []}\r\n          renderItem={(post, onHover) => (\r\n            <MoviesItem post={post} onHover={onHover} key={post.id} />\r\n          )}\r\n          toNav={\"movie\"}\r\n          total={0}\r\n        />\r\n      )}\r\n      <MyPagination total={total_pages} onChange={handlePageChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n"],"names":["_ref","post","onHover","isHovered","setIsHovered","useState","_jsx","className","style","onMouseEnter","handleMouseEnter","id","onMouseLeave","handleMouseLeave","children","_jsxs","src","concat","poster_path","alt","title","MaxLength","vote_average","items","renderItem","toNav","navigate","useNavigate","loading","error","useAppSelector","state","posts","_","setHoveredItem","handleHover","postlist","Array","from","length","map","index","Skeleton","variant","height","width","skeletonWrapper","postlist_center","item","postItem","onClick","memo","total","onChange","currentPage","setCurrentPage","searchParams","setSearchParams","useSearchParams","pageFromParams","Number","get","useEffect","cls","Stack","spacing","alignItems","marginTop","Pagination","count","Math","min","page","handlePageChange","event","set","toString","sx","color","borderColor","backgroundColor","name","MoviesList","dispatch","useAppDispatch","series","movies","total_pages","language","localStorage","getItem","console","log","useParams","getSeries","getMovie","_Fragment","PostList","entities","Object","values","SeriesItem","MoviesItem","MyPagination"],"sourceRoot":""}